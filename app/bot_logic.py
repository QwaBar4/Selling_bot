import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ContextTypes
from app import config, database as db, wireguard
from app.payments import create_freekassa_payment

logger = logging.getLogger(__name__)

async def handle_buy_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    user = db.get_user(user_id)
    if user and user.get('subscription_end_date'):
        try:
            end_date = datetime.fromisoformat(user['subscription_end_date'])
            if end_date > datetime.now():
                remaining_days = (end_date - datetime.now()).days
                await update.message.reply_text(
                    f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞."
                )
                return
        except:
            pass
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    try:
        payment_url = create_payment_url(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton("üïê –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="temp_access")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {config.PAYMENT_AMOUNT} {config.PAYMENT_CURRENCY}\n"
            f"üìÖ –°—Ä–æ–∫: {config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π\n\n"
            f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É –æ–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥.",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error creating payment URL: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_status_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if user.get('subscription_end_date'):
        try:
            end_date = datetime.fromisoformat(user['subscription_end_date'])
            if end_date > datetime.now():
                remaining_days = (end_date - datetime.now()).days
                
                await update.message.reply_text(
                    f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
                    f"üåê IP –∞–¥—Ä–µ—Å: {user.get('client_ip', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
                if user.get('wireguard_config'):
                    await context.bot.send_document(
                        user_id,
                        document=bytes(user['wireguard_config'], 'utf-8'),
                        filename=f"wg_{user_id}.conf"
                    )
                return
        except:
            pass
    
    await update.message.reply_text(
        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏."
    )

async def handle_temp_config_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
    user_id = update.effective_user.id
    await grant_temp_config(user_id, context.bot)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "temp_access":
        await grant_temp_config(query.from_user.id, context.bot)

async def grant_subscription(user_id: int, bot):
    """–í—ã–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ WG-Easy API"""
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    await deactivate_user_temp_config(user_id, bot)
    
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        wireguard.cleanup_user_clients(str(user_id), keep_latest=False)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ WG-Easy
        client_data = wireguard.create_client(str(user_id), is_temp=False)
        
        if not client_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WG-Easy –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await bot.send_message(config.ADMIN_TELEGRAM_ID, f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ WG-Easy: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {user_id}")
            await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        db.update_user_subscription(
            user_id, 
            config.SUBSCRIPTION_DAYS, 
            client_data['config'], 
            client_data['ip'],
            wg_easy_client_id=client_data['id']
        )

        await bot.send_message(
            user_id,
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            "–í–æ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª. "
            "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
        )
        await bot.send_document(
            user_id,
            document=bytes(client_data['config'], 'utf-8'),
            filename=f"wg_{user_id}.conf"
        )
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (WG-Easy ID: {client_data['id']})")

    except Exception as e:
        logger.exception(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        await bot.send_message(config.ADMIN_TELEGRAM_ID, f"‚ÄºÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")

async def grant_temp_config(user_id: int, bot):
    """–í—ã–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 10 –º–∏–Ω—É—Ç —á–µ—Ä–µ–∑ WG-Easy API —Å –∏–º–µ–Ω–µ–º ShallowTemp[1-128]"""
    logger.info(f"–í—ã–¥–∞—á–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        existing_temp = db.get_temp_config(user_id)
        random_suffix = random.randint(1, 128)
        if existing_temp:
            expires_at = datetime.fromisoformat(existing_temp['expires_at'])
            if expires_at > datetime.now():
                remaining_minutes = int((expires_at - datetime.now()).total_seconds() / 60)
                await bot.send_message(
                    user_id,
                    f"‚è∞ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥!\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_minutes} –º–∏–Ω.\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É –æ–ø–ª–∞—Ç—ã."
                )
                await bot.send_document(
                    user_id,
                    document=bytes(existing_temp['config_text'], 'utf-8'),
                    filename=f"ShallowTemp{random_suffix}.conf"
                )
                return
            else:
                # –ö–æ–Ω—Ñ–∏–≥ –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ WG-Easy –∏ –ë–î
                logger.info(f"–£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                if existing_temp['wg_easy_client_id']:
                    try:
                        wireguard.delete_client(existing_temp['wg_easy_client_id'])
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å WG-Easy –∫–ª–∏–µ–Ω—Ç–∞ {existing_temp['wg_easy_client_id']}: {e}")
                
                db.remove_temp_config(user_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        
        client_name = f"ShallowTemp{random_suffix}"

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ WG-Easy
        client_data = wireguard.create_client(client_name, is_temp=True)
        
        if not client_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ WG-Easy –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {user_id}")
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –≤ –ë–î
        try:
            db.add_temp_config(
                user_id, 
                client_data['config'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞
                client_data['ip'], 
                client_data['public_key'],
                wg_easy_client_id=client_data['id']
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è {user_id}: {e}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ WG-Easy
            try:
                wireguard.delete_client(client_data['id'])
                logger.info(f"–£–¥–∞–ª–µ–Ω WG-Easy –∫–ª–∏–µ–Ω—Ç {client_data['id']} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
            except Exception as del_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å WG-Easy –∫–ª–∏–µ–Ω—Ç–∞ {client_data['id']}: {del_e}")
            
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await bot.send_message(
            user_id,
            "üïê –í—Ä–µ–º–µ–Ω–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥ –≤—ã–¥–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É –æ–ø–ª–∞—Ç—ã Freekassa.\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω, "
            "–∞ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥."
        )
        await bot.send_document(
            user_id,
            document=bytes(client_data['config'], 'utf-8'),
            filename=f"ShallowTemp{random_suffix}.conf"
        )
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–ò–º—è: {client_name}, WG-Easy ID: {client_data['id']})")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ {user_id}: {e}")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def grant_permanent_config(user_id: int, bot):
    """–í—ã–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    logger.info(f"–í—ã–¥–∞—á–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        temp_config = db.get_temp_config(user_id)
        if temp_config and temp_config['wg_easy_client_id']:
            try:
                wireguard.delete_client(temp_config['wg_easy_client_id'])
                db.remove_temp_config(user_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è {user_id}: {e}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client_data = wireguard.create_client(str(user_id), is_temp=False)
        
        if not client_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ WG-Easy –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {user_id}")
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.update_user_config(
            user_id,
            client_data['config'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞
            client_data['ip'],
            client_data['id']
        )

        await bot.send_message(
            user_id,
            "üéâ –í–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!\n\n"
            "–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
        )
        await bot.send_document(
            user_id,
            document=bytes(client_data['config'], 'utf-8'),
            filename=f"wireguard_{user_id}.conf"
        )
        logger.info(f"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (WG-Easy ID: {client_data['id']})")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ {user_id}: {e}")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def deactivate_user_temp_config(user_id: int, bot):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WG-Easy"""
    temp_config = db.get_temp_config(user_id)
    if temp_config and temp_config['is_active']:
        wg_easy_client_id = temp_config.get('wg_easy_client_id')
        
        if wg_easy_client_id:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ WG-Easy
            if wireguard.delete_client(wg_easy_client_id):
                db.deactivate_temp_config(user_id)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (WG-Easy ID: {wg_easy_client_id})")
                
                try:
                    await bot.send_message(
                        user_id,
                        "üîÑ –í–∞—à –≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥ –æ—Ç–∫–ª—é—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É."
                    )
                except:
                    pass
            else:
                logger.error(f"Failed to delete WG-Easy client {wg_easy_client_id} for user {user_id}")

async def cleanup_expired_configs(bot: Bot):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
    expired_temp_configs = db.get_expired_temp_configs()
    for config in expired_temp_configs:
        try:
            if config['wg_easy_client_id']:
                if wireguard.delete_client(config['wg_easy_client_id']):
                    db.deactivate_temp_config(config['user_id'])
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {config['user_id']}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await bot.send_message(
                            config['user_id'],
                            "‚è≥ –í–∞—à –≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥ –∏—Å—Ç–µ–∫ –∏ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω.\n\n"
                            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º."
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {config['user_id']}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ {config['user_id']}: {e}")

    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    expired_subscriptions = db.get_expired_subscriptions()
    for user in expired_subscriptions:
        try:
            if user['wg_easy_client_id']:
                if wireguard.delete_client(user['wg_easy_client_id']):
                    db.deactivate_user_subscription(user['telegram_id'])
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']} –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await bot.send_message(
                            user['telegram_id'],
                            "‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n\n"
                            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /start"
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ {user['telegram_id']}: {e}")
