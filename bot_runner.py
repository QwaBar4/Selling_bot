import os
import logging
import logging.handlers
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from app.config import (
    TELEGRAM_BOT_TOKEN,
    LOG_FILE,
    SUBSCRIPTION_DAYS,
    SUBSCRIPTION_PRICE_RUB,
    SUBSCRIPTION_PRICE_USD,
    ADMIN_TELEGRAM_IDS
)
from app.database import (
    init_db,
    add_user,
    get_user,
    update_user_subscription,
    get_all_users,
    get_user_by_username
)
from app.payments import (
    create_freekassa_payment,
    create_kryptocloud_payment
)
from app.bot_logic import (
    grant_temp_config,
    cleanup_expired_configs,
    grant_subscription,
    deactivate_user_temp_config
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

log_handler = logging.handlers.RotatingFileHandler(
    LOG_FILE,
    maxBytes=10*1024*1024,
    backupCount=5
)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[log_handler, logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_ACTION, SELECTING_PAYMENT, FREEKASSA_VPN_CHOICE, SHOWING_INSTRUCTION, ALTERNATIVE_PAYMENT = range(5)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
ADMIN_MENU, ADMIN_GRANT_CONFIG, ADMIN_DELETE_CONFIG = range(10, 13)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_TELEGRAM_IDS

async def delete_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if update.message:
            await update.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def handle_user_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await delete_user_message(update, context)
    return SELECTING_ACTION

async def delete_temp_config_message(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        file_message_id = context.user_data.get(f'temp_file_message_{user_id}')
        if file_message_id:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=file_message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º: {e}")

        context.user_data.pop(f'temp_file_message_{user_id}', None)

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def delete_permanent_config_message(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        perm_file_message_id = context.user_data.get(f'perm_file_message_{user_id}')
        if perm_file_message_id:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=perm_file_message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º: {e}")

        context.user_data.pop(f'perm_file_message_{user_id}', None)

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def delete_temp_notification_message(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
    try:
        notification_message_id = context.user_data.get(f'temp_notification_{user_id}')
        if notification_message_id:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=notification_message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

        context.user_data.pop(f'temp_notification_{user_id}', None)

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def delete_admin_notification_message(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–æ–º"""
    try:
        admin_notification_message_id = context.user_data.get(f'admin_notification_{user_id}')
        if admin_notification_message_id:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=admin_notification_message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

        context.user_data.pop(f'admin_notification_{user_id}', None)

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def delete_menu_message(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
    try:
        menu_message_id = context.user_data.get(f'menu_message_{user_id}')
        if menu_message_id:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=menu_message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é: {e}")

        context.user_data.pop(f'menu_message_{user_id}', None)

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def clear_temp_config_data(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        await delete_temp_config_message(context, user_id)
        context.user_data.pop(f'temp_config_{user_id}', None)
        logger.info(f"–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def periodic_cleanup(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    await cleanup_expired_configs(context.bot)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    add_user(user.id, user.username, user.first_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–ë–ï–ó –º–µ–Ω—é)
    await delete_temp_config_message(context, user.id)
    await delete_permanent_config_message(context, user.id)
    await delete_temp_notification_message(context, user.id)
    await delete_admin_notification_message(context, user.id)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard_menu = ReplyKeyboardMarkup(
        [[KeyboardButton("üìã –ú–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    keyboard = [
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy')],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("‚ôøÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/')],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(user.id):
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω", callback_data='admin_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –≤–º–µ—Å—Ç–æ Markdown
    start_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! üî•\n\n"
        "–¢—ã –Ω–∞—à–µ–ª VPN, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ:\n\n"
        "‚îî üöÄ –ù–∏–∑–∫–∏–π –ø–∏–Ω–≥ –∏ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
        "‚îî üìà –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞\n"
        "‚îî üë• –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —á–∞—Ç–µ\n"
        "‚îî üñ• –¢—É–Ω–Ω–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–µ–≤–∞–π—Å–æ–≤\n"
        "‚îî ü•∑ –í—ã—Å–æ–∫—É—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_DAYS} –¥–Ω–µ–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n"
        "<i>Shallow by <a href='https://t.me/-'></a></i>\n\n"
    )

    try:
        if update.callback_query:
            # –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                start_text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
            if update.message:
                await delete_user_message(update, context)
            
            # –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
            await delete_menu_message(context, user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user.id,
                text=start_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            try:
                menu_message = await context.bot.send_message(
                    chat_id=user.id,
                    text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é:",
                    reply_markup=keyboard_menu
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                context.user_data[f'menu_message_{user.id}'] = menu_message.message_id
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await context.bot.send_message(
                chat_id=user.id,
                text=f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!",
                reply_markup=reply_markup
            )
        except Exception as fallback_error:
            logger.error(f"–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fallback_error}")

    return SELECTING_ACTION

async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é'"""
    if update.message and update.message.text == "üìã –ú–µ–Ω—é":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º start
        await delete_menu_message(context, update.effective_user.id)
        await delete_user_message(update, context)
        return await start(update, context)
    return SELECTING_ACTION

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    user_data = get_user(user_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    await delete_menu_message(context, user_id)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_temp_config_message(context, user_id)
    await delete_permanent_config_message(context, user_id)
    await delete_temp_notification_message(context, user_id)
    await delete_admin_notification_message(context, user_id)

    if user_data and user_data.get('subscription_end_date'):
        sub_end_date = datetime.fromisoformat(user_data['subscription_end_date']).strftime('%d.%m.%Y %H:%M')
        message = (f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
                  f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:** `{sub_end_date}`\n\n"
                  "–í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∏–∂–µ. –ü—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard.")

        keyboard = [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_start')]]
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        perm_file_message = await context.bot.send_document(
            chat_id=user_data['telegram_id'],
            document=bytes(user_data['wireguard_config'], 'utf-8'),
            filename=f"Sh1M_{str(user_data['telegram_id'])[:4]}.conf"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data[f'perm_file_message_{user_id}'] = perm_file_message.message_id

    else:
        message = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
        keyboard = [
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy')],
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_start')]
        ]
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

    return SELECTING_ACTION

async def ask_for_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ
    await delete_menu_message(context, user_id)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_temp_config_message(context, user_id)
    await delete_permanent_config_message(context, user_id)
    await delete_temp_notification_message(context, user_id)
    await delete_admin_notification_message(context, user_id)

    keyboard = [
        [InlineKeyboardButton(f"üí≥ Freekassa ({SUBSCRIPTION_PRICE_RUB} RUB)", callback_data='choose_freekassa')],
        [InlineKeyboardButton(f"üíé CryptoCloud ({SUBSCRIPTION_PRICE_USD} USD)", callback_data='pay_kryptocloud')],
        [InlineKeyboardButton("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", callback_data='alternative_payment')],
        [InlineKeyboardButton("üì≤ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", callback_data='show_instruction')],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]

    message = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã üåê \n\n"
        "‚îî üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã\n"
        "‚îî üá´üáÆ <s>–§–∏–Ω–ª—è–Ω–¥–∏—è</s>\n"
        "‚îî üá´üá∑ <s>–§—Ä–∞–Ω—Ü–∏—è</s>\n"
        "‚îî üáπüá∑ <s>–¢—É—Ä—Ü–∏—è</s>\n"
        "‚îî üá∑üá∫ <s>–†–æ—Å—Å–∏—è</s>\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "1 –º–µ—Å. - 150 —Ä—É–±.\n"
        "<s>3 –º–µ—Å. - 300 —Ä—É–±.</s>\n"
        "<s>6 –º–µ—Å. - 500 —Ä—É–±.</s>\n"
        "<s>12 –º–µ—Å. - 900 —Ä—É–±.</s>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã üëá"
    )

    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return SELECTING_PAYMENT

async def show_alternative_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await delete_menu_message(context, user_id)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_temp_config_message(context, user_id)
    await delete_permanent_config_message(context, user_id)
    await delete_temp_notification_message(context, user_id)
    await delete_admin_notification_message(context, user_id)

    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω 1", url='https://t.me/')],
        [InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω 2", url='https://t.me/')],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data='buy')]
    ]

    message = (
        "üîÑ <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "–ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, "
        "—É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞ "
        "–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:"
    )

    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return ALTERNATIVE_PAYMENT

async def show_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await delete_menu_message(context, user_id)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_temp_config_message(context, user_id)
    await delete_permanent_config_message(context, user_id)
    await delete_temp_notification_message(context, user_id)
    await delete_admin_notification_message(context, user_id)

    instruction_text = (
        "üì≤ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ WireGuard</b>\n\n"
        "üîπ <b>Android, iOS</b>\n\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ‚Üí <a href='https://play.google.com/store/apps/details?id=com.wireguard.android'>WireGuard –≤ Google Play</a>, "
        "<a href='https://apps.apple.com/us/app/wireguard/id1441195209'>AppStore</a>\n\n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –ù–∞–∂–º–∏ ¬´+¬ª ‚Üí ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª\n\n"
        "3Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª *.conf –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ\n\n"
        "4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å IP –Ω–∞ 2ip.ru ‚Äì –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è IP —Å–µ—Ä–≤–µ—Ä–∞ VPN ‚úÖ\n\n"
        "üíª <b>Windows</b>\n\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π –∫–ª–∏–µ–Ω—Ç ‚Üí <a href='https://www.wireguard.com/install/'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç WireGuard</a>\n\n"
        "2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏ –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (—Ñ–∞–π–ª *.conf)\n\n"
        "3Ô∏è‚É£ –û—Ç–∫—Ä–æ–π –∫–ª–∏–µ–Ω—Ç ‚Üí ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª ‚Üí ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞¬ª\n\n"
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ ‚Üí ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª\n\n"
        "–¢–∞–∫ –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å—Ç–∞–Ω–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–º —Å–µ—Ä—Ñ–∏–Ω–≥–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
    )

    keyboard = [
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data='buy')]
    ]

    await query.edit_message_text(
        text=instruction_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    return SHOWING_INSTRUCTION

# –ê–î–ú–ò–ù–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏", show_alert=True)
        return SELECTING_ACTION

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω–∫—É
    await delete_menu_message(context, user_id)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_temp_config_message(context, user_id)
    await delete_permanent_config_message(context, user_id)
    await delete_temp_notification_message(context, user_id)
    await delete_admin_notification_message(context, user_id)

    keyboard = [
        [InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ —Ç–µ–≥—É", callback_data='admin_grant_config')],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_user_list')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ —Ç–µ–≥—É", callback_data='admin_delete_config')],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_start')]
    ]

    message = (
        "üîß <b>–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return ADMIN_MENU

async def admin_request_username_for_grant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç username –¥–ª—è –≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if not is_admin(user_id):
        return SELECTING_ACTION

    keyboard = [
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data='admin_menu')]
    ]

    message = (
        "‚ûï <b>–í—ã–¥–∞—á–∞ –∫–æ–Ω—Ñ–∏–≥–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å @ –∏–ª–∏ –±–µ–∑):"
    )

    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return ADMIN_GRANT_CONFIG

async def admin_grant_config_by_username(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ username"""
    if not is_admin(update.effective_user.id):
        return SELECTING_ACTION

    username = update.message.text.strip().replace('@', '')
    await delete_user_message(update, context)

    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user_data = get_user_by_username(username)
        
        if not user_data:
            await context.bot.send_message(
                update.effective_user.id,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return ADMIN_GRANT_CONFIG

        target_user_id = user_data['telegram_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if user_data.get('subscription_end_date'):
            try:
                end_date = datetime.fromisoformat(user_data['subscription_end_date'])
                if end_date > datetime.now():
                    remaining_days = (end_date - datetime.now()).days
                    await context.bot.send_message(
                        update.effective_user.id,
                        f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}"
                    )
                    return ADMIN_GRANT_CONFIG
            except:
                pass

        # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await grant_subscription(target_user_id, context.bot, context)  # –ü–µ—Ä–µ–¥–∞–µ–º context
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await context.bot.send_message(
            update.effective_user.id,
            f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {target_user_id})"
        )

        logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –≤—ã–¥–∞–ª –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} ({target_user_id})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
        await context.bot.send_message(
            update.effective_user.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}"
        )

    return ADMIN_MENU

async def admin_show_user_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–±–æ—Ç–∞—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(update.effective_user.id):
        await query.edit_message_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return SELECTING_ACTION

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")

        users = get_all_users()
        message = "üìä <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        
        if not users:
            message += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            for i, user in enumerate(users[:20], 1):
                username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                status = "‚ùå –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                
                if user.get('subscription_end_date'):
                    try:
                        end_date = datetime.fromisoformat(user['subscription_end_date'])
                        if end_date > datetime.now():
                            days_left = (end_date - datetime.now()).days
                            status = f"‚úÖ –∞–∫—Ç–∏–≤–Ω–∞ ({days_left} –¥–Ω.)"
                    except:
                        pass
                
                message += f"{i}. {user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} ({username})\nID: {user['telegram_id']} | –ü–æ–¥–ø–∏—Å–∫–∞: {status}\n\n"

            if len(users) > 20:
                message += f"–ü–æ–∫–∞–∑–∞–Ω–æ 20 –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞–±–æ—Ç–∞—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='admin_user_list')],
            [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data='admin_menu')]
        ]

        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_show_user_list: {str(e)}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data='admin_menu')]
            ])
        )

    return ADMIN_MENU  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ADMIN_MENU

async def admin_request_username_for_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if not is_admin(user_id):
        return SELECTING_ACTION

    keyboard = [
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data='admin_menu')]
    ]

    message = (
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å @ –∏–ª–∏ –±–µ–∑):"
    )

    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return ADMIN_DELETE_CONFIG

async def admin_delete_config_by_username(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ username"""
    if not is_admin(update.effective_user.id):
        return SELECTING_ACTION

    username = update.message.text.strip().replace('@', '')
    await delete_user_message(update, context)

    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user_data = get_user_by_username(username)
        
        if not user_data:
            await context.bot.send_message(
                update.effective_user.id,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return ADMIN_DELETE_CONFIG

        target_user_id = user_data['telegram_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if not user_data.get('subscription_end_date'):
            await context.bot.send_message(
                update.effective_user.id,
                f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
            )
            return ADMIN_DELETE_CONFIG

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        try:
            end_date = datetime.fromisoformat(user_data['subscription_end_date'])
            if end_date <= datetime.now():
                await context.bot.send_message(
                    update.effective_user.id,
                    f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞."
                )
                return ADMIN_DELETE_CONFIG
        except:
            pass

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        await deactivate_user_temp_config(target_user_id, context.bot, context)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        success = False
        if user_data.get('wg_easy_client_id'):
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º wireguard –∑–¥–µ—Å—å
            from app import wireguard
            from app.database import deactivate_user_subscription
            
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ WG-Easy
            if wireguard.delete_client(user_data['wg_easy_client_id']):
                # –ü–û–õ–ù–û–°–¢–¨–Æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                deactivate_user_subscription(target_user_id)
                success = True
                logger.info(f"–£–¥–∞–ª–µ–Ω WG-Easy –∫–ª–∏–µ–Ω—Ç {user_data['wg_easy_client_id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å WG-Easy –∫–ª–∏–µ–Ω—Ç–∞ {user_data['wg_easy_client_id']}")
        
        if success:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await delete_temp_config_message(context, target_user_id)
            await delete_permanent_config_message(context, target_user_id)
            await delete_temp_notification_message(context, target_user_id)
            await delete_admin_notification_message(context, target_user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await context.bot.send_message(
                update.effective_user.id,
                f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {target_user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    target_user_id,
                    "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")

            logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} —É–¥–∞–ª–∏–ª –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} ({target_user_id})")
        else:
            await context.bot.send_message(
                update.effective_user.id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
        await context.bot.send_message(
            update.effective_user.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}"
        )

    return ADMIN_MENU

async def ask_freekassa_vpn_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await delete_menu_message(context, user_id)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_temp_config_message(context, user_id)
    await delete_permanent_config_message(context, user_id)
    await delete_temp_notification_message(context, user_id)
    await delete_admin_notification_message(context, user_id)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –£ –º–µ–Ω—è –µ—Å—Ç—å VPN", callback_data='pay_freekassa_direct')],
        [InlineKeyboardButton("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç VPN", callback_data='need_temp_vpn')],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data='buy')]
    ]

    message = (
        "üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Freekassa</b>\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É Freekassa –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è VPN.\n\n"
        "<i>–£ –≤–∞—Å –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–π VPN?</i>"
    )

    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return FREEKASSA_VPN_CHOICE

async def provide_temp_vpn_and_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await delete_menu_message(context, user_id)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_temp_config_message(context, user_id)
    await delete_permanent_config_message(context, user_id)
    await delete_temp_notification_message(context, user_id)
    await delete_admin_notification_message(context, user_id)

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await query.edit_message_text(
        "‚è≥ –°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥...",
        reply_markup=None
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    temp_config_data = await grant_temp_config(user_id, context.bot, send_file=False, send_message=False)

    if not temp_config_data:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='choose_freekassa')
            ]])
        )
        return FREEKASSA_VPN_CHOICE

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_url, _ = create_freekassa_payment(user_id)

    if payment_url:
        keyboard = [
            [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥", callback_data=f'download_temp_{user_id}')],
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ Freekassa", url=payment_url)],
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data='buy')]
        ]

        status_text = "‚úÖ **–í—Ä–µ–º–µ–Ω–Ω—ã–π VPN —Å–æ–∑–¥–∞–Ω!**" if not temp_config_data['is_existing'] else "‚è∞ **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN!**"

        message = (
            f"{status_text}\n\n"
            f"üïê **–î–µ–π—Å—Ç–≤—É–µ—Ç:** {temp_config_data['remaining_minutes']} –º–∏–Ω.\n\n"
            "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥'\n"
            "2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ WireGuard\n"
            "3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN\n"
            "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è"
        )

        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        context.user_data[f'temp_config_{user_id}'] = temp_config_data
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    return SELECTING_ACTION

async def download_temp_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
    query = update.callback_query
    await query.answer("üìÅ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω—Ñ–∏–≥...")
    user_id = update.effective_user.id

    # –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∞
    temp_config_data = context.user_data.get(f'temp_config_{user_id}')

    if temp_config_data:
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
            await delete_temp_config_message(context, user_id)
            await delete_permanent_config_message(context, user_id)
            await delete_temp_notification_message(context, user_id)
            await delete_admin_notification_message(context, user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
            file_message = await context.bot.send_document(
                user_id,
                document=bytes(temp_config_data['config'], 'utf-8'),
                filename=temp_config_data['filename'],
                caption="üìÅ –í–∞—à –≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥\n\n–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ WireGuard –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π."
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            context.user_data[f'temp_file_message_{user_id}'] = file_message.message_id

            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞", show_alert=True)
    else:
        logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await query.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", show_alert=True)

    return SELECTING_ACTION

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    payment_system = query.data
    await query.answer()
    user_id = update.effective_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await delete_menu_message(context, user_id)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_temp_config_message(context, user_id)
    await delete_permanent_config_message(context, user_id)
    await delete_temp_notification_message(context, user_id)
    await delete_admin_notification_message(context, user_id)

    if payment_system == 'pay_freekassa_direct':
        payment_url, _ = create_freekassa_payment(user_id)
    elif payment_system == 'pay_kryptocloud':
        payment_url, _ = create_kryptocloud_payment(user_id)
    else:
        return SELECTING_ACTION

    if payment_url:
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data='buy')]
        ]

        message = ("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.\n\n"
                  "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–º –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É. "
                  "–í–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏ –Ω–∞–∂–∏–º–∞—Ç—å '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' –Ω–µ –Ω—É–∂–Ω–æ.")
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç {payment_system} –¥–ª—è {user_id}")

    return SELECTING_ACTION

def main():
    init_db()

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(ask_for_payment_method, pattern='^buy$'),
                CallbackQueryHandler(show_profile, pattern='^profile$'),
                CallbackQueryHandler(start, pattern='^back_to_start$'),
                CallbackQueryHandler(show_admin_menu, pattern='^admin_menu$'),
                CallbackQueryHandler(download_temp_config, pattern=r'^download_temp_\d+$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_button),
            ],
            SELECTING_PAYMENT: [
                CallbackQueryHandler(ask_freekassa_vpn_choice, pattern='^choose_freekassa$'),
                CallbackQueryHandler(process_payment, pattern='^pay_kryptocloud$'),
                CallbackQueryHandler(show_alternative_payment, pattern='^alternative_payment$'),
                CallbackQueryHandler(show_instruction, pattern='^show_instruction$'),
                CallbackQueryHandler(start, pattern='^back_to_start$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_button),
            ],
            FREEKASSA_VPN_CHOICE: [
                CallbackQueryHandler(process_payment, pattern='^pay_freekassa_direct$'),
                CallbackQueryHandler(provide_temp_vpn_and_payment, pattern='^need_temp_vpn$'),
                CallbackQueryHandler(ask_for_payment_method, pattern='^buy$'),
                CallbackQueryHandler(download_temp_config, pattern=r'^download_temp_\d+$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_button),
            ],
            SHOWING_INSTRUCTION: [
                CallbackQueryHandler(ask_for_payment_method, pattern='^buy$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_button),
            ],
            ALTERNATIVE_PAYMENT: [
                CallbackQueryHandler(ask_for_payment_method, pattern='^buy$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_button),
            ],
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            ADMIN_MENU: [
                CallbackQueryHandler(admin_request_username_for_grant, pattern='^admin_grant_config$'),
                CallbackQueryHandler(admin_show_user_list, pattern='^admin_user_list$'),
                CallbackQueryHandler(admin_request_username_for_delete, pattern='^admin_delete_config$'),
                CallbackQueryHandler(show_admin_menu, pattern='^admin_menu$'),
                CallbackQueryHandler(start, pattern='^back_to_start$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_button),
            ],
            ADMIN_GRANT_CONFIG: [
                CallbackQueryHandler(show_admin_menu, pattern='^admin_menu$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_grant_config_by_username),
            ],
            ADMIN_DELETE_CONFIG: [
                CallbackQueryHandler(show_admin_menu, pattern='^admin_menu$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_delete_config_by_username),
            ],
        },
        fallbacks=[
            CommandHandler('start', start),
            MessageHandler(filters.TEXT, handle_start_button)
        ],
    )

    application.add_handler(conv_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue = application.job_queue
    if job_queue:
        job_queue.run_repeating(periodic_cleanup, interval=300, first=10)
        logger.info("Periodic cleanup job scheduled")
    else:
        logger.warning("Job queue not available, periodic cleanup disabled")

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling()

if __name__ == '__main__':
    main()

