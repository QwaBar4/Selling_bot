import os
import logging
import logging.handlers
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from app.config import (
    TELEGRAM_BOT_TOKEN,
    LOG_FILE,
    SUBSCRIPTION_DAYS,
    SUBSCRIPTION_PRICE_RUB,
    SUBSCRIPTION_PRICE_USD
)
from app.database import (
    init_db,
    add_user,
    get_user,
    update_user_subscription
)
from app.payments import (
    create_freekassa_payment,
    create_kryptocloud_payment
)
from app.bot_logic import (
    grant_temp_config,
    cleanup_expired_configs
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

log_handler = logging.handlers.RotatingFileHandler(
    LOG_FILE,
    maxBytes=10*1024*1024,
    backupCount=5
)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[log_handler, logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_ACTION, SELECTING_PAYMENT, FREEKASSA_VPN_CHOICE = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    add_user(user.id, user.username, user.first_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

    keyboard = [
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy')],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    start_text = (f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π WireGuard. "
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {SUBSCRIPTION_DAYS} –¥–Ω–µ–π.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(start_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(start_text, reply_markup=reply_markup)
        
    return SELECTING_ACTION

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = get_user(update.effective_user.id)

    if user_data and user_data.get('subscription_end_date'):
        sub_end_date = datetime.fromisoformat(user_data['subscription_end_date']).strftime('%d.%m.%Y %H:%M')
        message = (f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
                 f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:** `{sub_end_date}`\n\n"
                 "–í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∏–∂–µ. –ü—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard.")
        await query.edit_message_text(message, parse_mode='Markdown')
        await context.bot.send_document(
            chat_id=user_data['telegram_id'],
            document=bytes(user_data['wireguard_config'], 'utf-8'),
            filename=f"wg_{user_data['telegram_id']}.conf"
        )
    else:
        message = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
        keyboard = [[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy')]]
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        
    return SELECTING_ACTION

async def ask_for_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton(f"üí≥ Freekassa ({SUBSCRIPTION_PRICE_RUB} RUB)", callback_data='choose_freekassa')],
        [InlineKeyboardButton(f"üíé CryptoCloud ({SUBSCRIPTION_PRICE_USD} USD)", callback_data='pay_kryptocloud')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECTING_PAYMENT

async def ask_freekassa_vpn_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ VPN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Freekassa"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –£ –º–µ–Ω—è –µ—Å—Ç—å VPN", callback_data='pay_freekassa_direct')],
        [InlineKeyboardButton("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç VPN", callback_data='need_temp_vpn')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='buy')]
    ]
    
    message = (
        "üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Freekassa**\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É Freekassa –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è VPN.\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–π VPN?"
    )
    
    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    return FREEKASSA_VPN_CHOICE

async def provide_temp_vpn_and_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    # –í—ã–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    await grant_temp_config(user_id, context.bot)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_url, _ = create_freekassa_payment(user_id)
    
    if payment_url:
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ Freekassa", url=payment_url)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_start')]
        ]
        
        message = (
            "üïê **–í—Ä–µ–º–µ–Ω–Ω—ã–π VPN –≤—ã–¥–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç!**\n\n"
            "1Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –≤ WireGuard\n"
            "2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, "
            "–∞ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    return ConversationHandler.END

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    payment_system = query.data
    await query.answer()
    user_id = update.effective_user.id
    
    if payment_system == 'pay_freekassa_direct':
        payment_url, _ = create_freekassa_payment(user_id)
    elif payment_system == 'pay_kryptocloud':
        payment_url, _ = create_kryptocloud_payment(user_id)
    else:
        return SELECTING_ACTION

    if payment_url:
        message = ("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.\n\n"
                 "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–º –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É. "
                 "–í–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏ –Ω–∞–∂–∏–º–∞—Ç—å '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' –Ω–µ –Ω—É–∂–Ω–æ.")
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)]
        ]))
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç {payment_system} –¥–ª—è {user_id}")
        
    return ConversationHandler.END

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start")
    return ConversationHandler.END

async def periodic_cleanup(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    await cleanup_expired_configs(context.bot)

def main():
    init_db()
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(ask_for_payment_method, pattern='^buy$'),
                CallbackQueryHandler(show_profile, pattern='^profile$'),
            ],
            SELECTING_PAYMENT: [
                CallbackQueryHandler(ask_freekassa_vpn_choice, pattern='^choose_freekassa$'),
                CallbackQueryHandler(process_payment, pattern='^pay_kryptocloud$'),
                CallbackQueryHandler(start, pattern='^back_to_start$'),
            ],
            FREEKASSA_VPN_CHOICE: [
                CallbackQueryHandler(process_payment, pattern='^pay_freekassa_direct$'),
                CallbackQueryHandler(provide_temp_vpn_and_payment, pattern='^need_temp_vpn$'),
                CallbackQueryHandler(ask_for_payment_method, pattern='^buy$'),
            ],
        },
        fallbacks=[CommandHandler('start', start), MessageHandler(filters.TEXT, end_conversation)],
    )

    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    # –ü–æ–ª—É—á–∞–µ–º job_queue –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è application
    job_queue = application.job_queue
    if job_queue:
        job_queue.run_repeating(periodic_cleanup, interval=300, first=10)
        logger.info("Periodic cleanup job scheduled")
    else:
        logger.warning("Job queue not available, periodic cleanup disabled")
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling()

if __name__ == '__main__':
    main()
